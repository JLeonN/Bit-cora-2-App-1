### **Estado Actual del Proyecto: Bitácora II**

Estoy desarrollando una aplicación en **Vue 3 con Quasar** llamada **Bitácora II** para gestionar pedidos internos, ubicaciones e inventario, tipo sistema de trabajo. El objetivo es generar un archivo .APK para instalarla y usarla en un celular físico, con la meta final de publicarla en la Play Store de Google.

#### 📦 **Estructura Actual**

##### 🧩 **Componentes Principales:**

* **PedidosRealizados.vue:** Muestra todos los pedidos guardados y tiene un botón para **enviar** el Excel.

* **HistorialPedidos.vue:** Muestra un historial de pedidos agrupados por fechas, también con botón de **Enviar**.

* **Inicio.vue (PanelInicio.vue):** Pantalla principal con navegación a las distintas funciones.

* **ModalNuevoPedido.vue:** Modal para agregar un pedido manual, con input, botón de cámara y confirmación con Enter o botón de aceptar.  
  - El input manual agrega un solo pedido y se cierra automáticamente al confirmar.  
  - El botón de cámara abre **CamaraPedidos.vue**, donde se pueden escanear varios pedidos a la vez.

* **CamaraPedidos.vue:** Modal que integra cámara en un `<div>` con botones personalizados y soporte para escaneo de códigos de barra usando **@zxing/library**.

* **AjustarUbicaciones.vue:** Nueva tabla para gestionar ubicaciones de artículos, con formulario responsive (inputs en columna en pantallas chicas) y opciones para editar o eliminar.

* **ModalEliminar.vue:** Modal genérico y reutilizable para confirmación de eliminaciones, usado tanto en pedidos como en ubicaciones.

##### 📁 **Lógica de Exportación y Guardado de Archivos:**

* Uso la librería **xlsx** para generar los datos Excel en memoria.
* Lógica para descarga directa en la web (`exportarExcel.js`).
* Módulo reutilizable (`src/components/Pedidos/GeneraExcel/GeneraExcel.js`) con la función `generarYGuardarExcelTemporal`.
* Función que usa **@capacitor/filesystem** para guardar el archivo Excel (en Base64) como archivo físico temporal en el dispositivo (`Directory.Cache`).
* El archivo Excel se guarda con un nombre dinámico que incluye el rango de fechas (`Pedidos_DD-MM-AAAA_a_DD-MM-AAAA.xlsx`).

##### 💾 **Almacenamiento de Pedidos:**

* Uso **@capacitor/preferences** para persistencia de pedidos y fechas (`usoAlmacenamientoCapacitor.js`).
* Manejo centralizado en `almacenamiento.js` que decide qué sistema usar.
* Rutas ajustadas para evitar errores de imports dinámicos (404 corregidos).

##### 📷 **Integración de Cámara y Escaneo:**

* Implementado con **@zxing/library** embebido en un `<div>` con botones propios, reemplazando el uso directo de **@capacitor/camera**.
* **CamaraPedidos.vue** permite mostrar la cámara, controlar permisos y escanear en tiempo real.
* Miniatura de la última captura mostrada sobre la cámara, mejorando la UX.
* Manejo de errores optimizado y logs en pantalla para depuración.

---

##### ✅ **Resumen de Logros Actuales:**

* Persistencia funcional de datos de pedidos.
* **Generación y guardado nativo de archivos Excel temporales** con Capacitor Filesystem.
* **Funcionalidad de envío por aplicaciones nativas** usando @capacitor/share.
* Nombre de archivo Excel adaptado dinámicamente al rango de fechas.
* Escaneo de códigos de barra implementado y funcionando en dispositivo real.
* Cámara embebida en un `<div>` con interfaz personalizable y botones propios.
* Separación clara y modular de responsabilidades (UI, datos, generación/guardado, envío, cámara, escaneo).
* Reutilización de componentes (botones flotantes, modales, cámara).
* Feedback al usuario con notificaciones de éxito y error.
* Navegación principal funcional y errores de rutas corregidos.
* Manejo robusto de permisos de cámara.
* Input manual de pedidos funcionando con Enter y botón confirmar, emitido directamente a la tabla principal.
* **Nuevo módulo de Ajuste de Ubicaciones con tabla y formulario responsive.**
* **Creación de ModalEliminar.vue genérico, reutilizable en pedidos y ubicaciones.**

---

##### 🎯 **Siguiente objetivo:**

* Refinar experiencia de usuario en el envío (agregar opciones, manejo de errores, etc.).
* Mejorar UI/UX según feedback.
* Optimizar escaneo de códigos con distintos formatos de códigos de barra y QR.
* Añadir funciones útiles para el trabajo, como inventario de ubicaciones exportable a Excel.
* Incorporar función de control de stock, similar a pedidos y ubicaciones, con posibilidad de exportar a Excel y enviar por correo.
* Ajustes finales en la interfaz de cámara y modales para que sean más intuitivos y consistentes.

---

src
├── App.vue
├── css
│   └── app.css
├── layouts
│   └── MainLayout.vue
├── pages
│   ├── AjustarUbicaciones.vue
│   ├── ErrorNotFound.vue
│   └── TablaPedidos.vue
├── router
│   ├── index.js
│   └── routes.js
├── components
│   ├── BaseDeDatos
│   │   ├── almacenamiento.js
│   │   ├── usoAlmacenamientoCapacitor.js
│   │   ├── usoAlmacenamientoPedidos.js
│   │   └── usoAlmacenamientoUbicaciones.js
│   ├── Botones
│   │   ├── BotonFlotante.vue
│   │   ├── BotonesDescargarEnviar.vue
│   │   ├── BotonesNavegacion.vue
│   │   └── TresBotones.vue
│   ├── Camara
│   │   └── CamaraPedidos.vue
│   ├── Inicio
│   │   └── PanelInicio.vue
│   ├── Logica
│   │   ├── Envios
│   │   │   └── CompartirExcel.js
│   │   ├── Pedidos
│   │   │   └── GeneraExcel
│   │   │       ├── GeneraExcel.js
│   │   │       └── ExportarPedidosExcel.js
│   │   └── Ubicaciones
│   │       ├── FormularioUbicacion.vue
│   │       └── TablaUbicaciones.vue
│   ├── Modales
│   │   ├── ModalEditarPedido.vue
│   │   ├── ModalEditarUbicacion.vue
│   │   ├── ModalEliminar.vue
│   │   └── ModalNuevoPedido.vue
│   └── Pedidos
│       ├── HistorialPedidos.vue
        └── PedidosRealizados.vue