### **Estado Actual del Proyecto: Bitácora II**

Estoy desarrollando una aplicación en **Vue 3 con Quasar** llamada **Bitácora II**, orientada a la gestión de **pedidos internos, ubicaciones e inventario**. Es un sistema de trabajo pensado para correr como aplicación móvil en Android, con la meta de generar un archivo **.APK** e instalarlo en un dispositivo físico, para luego publicarlo en la **Play Store de Google**.  

---

### 📦 **Estructura Actual**

#### 🧩 **Componentes Principales**
- **PedidosRealizados.vue:** Muestra todos los pedidos guardados y ofrece un botón para **enviar** el Excel.  
- **HistorialPedidos.vue:** Historial de pedidos agrupados por fechas, también con botón de **Enviar**.  
- **Inicio.vue (PanelInicio.vue):** Pantalla principal de navegación hacia las distintas funciones.  
- **ModalNuevoPedido.vue:** Modal para agregar pedidos manuales, con input, botón de cámara y confirmación.  
  - Input manual: agrega un solo pedido y cierra el modal automáticamente.  
  - Botón de cámara: abre **CamaraPedidos.vue** para escanear múltiples pedidos.  
- **CamaraPedidos.vue:** Modal con cámara embebida en un `<div>` + botones personalizados. Usa **@zxing/library** para escaneo en tiempo real de códigos de barra y QR.  
- **AjustarUbicaciones.vue:** Tabla para gestionar ubicaciones de artículos, con formulario responsive, edición y eliminación.  
  - Agregar ubicaciones manualmente o usando la cámara.  
  - Botón de **enviar Excel** ya funcional.  
- **ModalEliminar.vue:** Modal genérico, reutilizable tanto en pedidos como en ubicaciones.  
- **CodigoMasNombre.vue:** Nuevo componente que implementa la lógica de búsqueda en base de datos, mostrando coincidencias dinámicamente.  

---

#### 📁 **Lógica de Exportación y Guardado de Archivos**
- Uso de **xlsx** para generar datos Excel en memoria.  
- Descarga directa en la web (`exportarExcel.js`).  
- Módulo reutilizable (`GeneraExcel.js`) con función `generarYGuardarExcelTemporal`.  
- Uso de **@capacitor/filesystem** para guardar Excel en Base64 en `Directory.Cache`.  
- Nombre de archivo dinámico con rango de fechas (`Pedidos_DD-MM-AAAA_a_DD-MM-AAAA.xlsx`).  
- Nuevo módulo: **ExportarUbicacionesExcel.js** para manejar exportación y envío de Excel desde el módulo de ubicaciones.  

---

#### 💾 **Almacenamiento de Datos**
- Persistencia con **@capacitor/preferences**.  
- Manejo centralizado en `almacenamiento.js`.  
- `usoAlmacenamientoPedidos.js` y `usoAlmacenamientoUbicaciones.js` para modularizar la lógica.  
- Rutas corregidas para evitar errores de imports dinámicos (404).  

---

#### 📷 **Integración de Cámara y Escaneo**
- Implementación con **@zxing/library** dentro de un `<div>` con botones personalizados.  
- **CamaraPedidos.vue** maneja permisos de cámara, escaneo en tiempo real y muestra miniatura de la última captura.  
- Optimización del escaneo para códigos de barra y QR ✅.  

---

#### 🗂️ **Módulo de Ubicaciones**
- **FormularioUbicacion.vue:** Alta/edición responsive.  
- **TablaUbicaciones.vue:** Lista de ubicaciones con acciones.  
- **ModalEditarUbicacion.vue:** Edición puntual.  
- **ModalEliminar.vue:** Confirmación reutilizada.  
- **ExportarUbicacionesExcel.js:** Exportación de ubicaciones a Excel.  
- **CamaraUbicaciones.vue:** Escaneo rápido de ubicaciones.  

---

#### 🔎 **Nueva Función: Búsqueda de Artículos**
- Se implementó una **base de datos local** con un array de artículos (`código` + `nombre`).  
- Nuevo componente **CodigoMasNombre.vue** maneja esta lógica.  
- Cuando el usuario escribe en el formulario de **ubicaciones**, aparece un **rectángulo flotante** con el título **“Artículos encontrados”**.  
- Ese rectángulo muestra **5 coincidencias más cercanas**, ya sea que el usuario escriba un código o parte del nombre (ejemplo: “manillar”).  
- A medida que el usuario escribe, la lista se ajusta dinámicamente.  
- Si no hay coincidencias, aparece el mensaje **“Artículos no encontrados”**.  

---

### ✅ **Resumen de Logros Actuales**
- Persistencia de pedidos y ubicaciones.  
- Generación y guardado de Excel con Capacitor.  
- Envío de Excel por apps nativas.  
- Escaneo de códigos en tiempo real funcionando.  
- Interfaz modular (UI, datos, cámara, exportación).  
- Reutilización de componentes (botones, modales, cámara).  
- Feedback al usuario con notificaciones.  
- Gestión completa de ubicaciones.  
- **Nueva búsqueda inteligente de artículos con coincidencias dinámicas.**  

---

### 🎯 **Siguientes Objetivos**
- Refinar experiencia en envíos (manejo de errores).  
- Mejorar UI/UX general.  
- Implementar control de stock con exportación a Excel.  
- Ajustar detalles de cámara y modales.  
- Mejorar presentación visual del rectángulo de coincidencias (animaciones, estilos).  


### 📂 **Estructura de Archivos

src
├── App.vue
├── css
│   └── app.css
├── layouts
│   └── MainLayout.vue
├── pages
│   ├── AjustarUbicaciones.vue
│   ├── ErrorNotFound.vue
│   └── TablaPedidos.vue
├── router
│   ├── index.js
│   └── routes.js
├── components
│   ├── BaseDeDatos
│   │   ├── CodigosArticulos.js 
│   │   ├── almacenamiento.js
│   │   ├── usoAlmacenamientoCapacitor.js
│   │   ├── usoAlmacenamientoPedidos.js
│   │   └── usoAlmacenamientoUbicaciones.js
│   ├── Botones
│   │   ├── BotonFlotante.vue
│   │   ├── BotonesDescargarEnviar.vue
│   │   ├── BotonesNavegacion.vue
│   │   └── TresBotones.vue
│   ├── Inicio
│   │   └── PanelInicio.vue
│   ├── Logica
│   │   ├── Envios
│   │   │   └── CompartirExcel.js
│   │   ├── Pedidos
│   │   │   ├── CamaraPedidos.vue
│   │   │   ├── CompartirExcel.js
│   │   │   ├── ExportarPedidosExcel.js
│   │   │   └── GeneraExcel.js
│   │   └── Ubicaciones
│   │       ├── CamaraEscaneo.vue
│   │       ├── CamaraUbicaciones.vue
│   │       ├── CodigoMasNombre.vue
│   │       ├── ExportarUbicacionesExcel.js
│   │       ├── FormularioUbicacion.vue
│   │       └── TablaUbicaciones.vue
│   ├── Modales
│   │   ├── ModalEditarPedido.vue
│   │   ├── ModalEditarUbicacion.vue
│   │   ├── ModalEliminar.vue
│   │   └── ModalNuevoPedido.vue
│   └── Pedidos
│       ├── HistorialPedidos.vue
│       └── PedidosRealizados.vue